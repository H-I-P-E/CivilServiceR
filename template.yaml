AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  SSHKey:
    Type: AWS::SSM::Parameter::Value<String>
  DockerImage: 
    Type: String
    Default: civilservicejobsexplorer
  DashboardName:
    Type: String
    Default: CivilServiceJobsExplorer
  BucketName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: civil-service-jobs
  AmiId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: ubuntuAMI
  InstanceType:
    Type: String
    Default: t3.small

Resources:

  DashboardRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: 
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: DashboardPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ssm:GetParameter
            Resource:
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DashboardName}/*
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: *
          - Effect: Allow
            Action: ecr:*
            Resource: *
          - Effect: Allow
            Action: s3:*
            Resource: 
            - !Sub arn:aws:s3:::${BucketName}*
  
  DashboardInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: !Ref DashboardRole
      
      
  DashboardAutoScalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKey
      IamInstanceProfile: !Ref DashboardInstanceProfile
#       SecurityGroups: !Ref DashboardSecurityGroup
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            aws ecr get-login --region ${AWS::Region} --no-include-email
            docker run -p 80:3838 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${docker_image}:latest
          - docker_image: !Ref DockerImage
            

  DashboardAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs AWS::Region
      AutoScalingGroupName: !Sub Dashboards-${DashboardName}
      Cooldown: 30
      MinSize: 0
      DesiredCapacity: 1
      MaxSize: 3
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref DashboardAutoScalingLaunchConfig
      LoadBalancerNames: !Ref DashboardLoadBalancer
      
  DashboardLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: PathbasedALB
      Listeners:
        InstancePort: 80
 #maybe need to change instanceport to 3838, but hopefully docker run -p 80:3838 takes care of that
        LoadBalancerPort: 80
        Protocol: https
        #may need to change to http or tcp if it doesn;t work
     
     
     
#   DashboardSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Condition: CreateResource
#     Properties:
#       GroupDescription: Ingress and egress
#       SecurityGroupIngress:
#       - IpProtocol: https
#         CidrIp: 0.0.0.0/0
#         FromPort: 80
#         ToPort: 80
#       SecurityGroupEgress:
#       - IpProtocol: https
#         CidrIp: 0.0.0.0/0
#         FromPort: 80
#         ToPort: 80
#       - IpProtocol: https
#         CidrIp: 0.0.0.0/0
#         FromPort: 3838
#         ToPort: 3838
 
